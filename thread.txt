import sys
from io import StringIO
import subprocess
import threading

def capture_output_and_write_to_file(function, output_file):
    # Redirection de sys.stdout vers un objet StringIO
    old_stdout = sys.stdout
    sys.stdout = StringIO()

    try:
        # Fonction externe
        function()

        # Récupération de la sortie
        output = sys.stdout.getvalue()

        # Écriture de la sortie dans le fichier
        with open(output_file, 'w') as f:
            f.write(output)
    finally:
        # Restauration de sys.stdout
        sys.stdout = old_stdout

# Fonction externe à appeler (remplacez avec la fonction réelle)
def external_function():
    import time
    for i in range(10):
        print("Element", i)
        time.sleep(1)

# Fichier où écrire la sortie
output_file = "output.txt"

# Lancer la fonction externe dans un thread pour ne pas bloquer le script principal
thread = threading.Thread(target=capture_output_and_write_to_file, args=(external_function, output_file))
thread.start()

# Lecture en direct de la sortie écrite dans le fichier
with open(output_file, 'r') as f:
    while True:
        line = f.readline()
        if not line:
            break
        print(line.strip())  # Afficher la ligne sans le saut de ligne


async function fetchTwoApis() {
    try {
        const response1 = await fetch('url_de_votre_api_1');
        const data1 = await response1.json();

        const response2 = await fetch('url_de_votre_api_2');
        const data2 = await response2.json();

        // Utilisez les données récupérées ici
        console.log('Données de la première API :', data1);
        console.log('Données de la deuxième API :', data2);
    } catch (error) {
        console.error('Une erreur s\'est produite :', error);
    }
}

fetchTwoApis();
import { useEffect, useRef } from 'react';
import { Terminal } from 'xterm';
import 'xterm/css/xterm.css';

function MyTerminalComponent() {
    const terminalRef = useRef();

    useEffect(() => {
        const term = new Terminal();
        term.open(terminalRef.current);

        // Fonction pour écrire des lignes dans le terminal
        function writeToTerminal(lines) {
            lines.forEach(line => {
                term.writeln(line);
            });
        }

        // Exemple : écrire des lignes dans le terminal
        const lines = ['Ligne 1', 'Ligne 2', 'Ligne 3'];
        writeToTerminal(lines);

        // Nettoyer le terminal lorsque le composant est démonté
        return () => {
            term.dispose();
        };
    }, []);

    return <div ref={terminalRef}></div>;
}

export default MyTerminalComponent;


import { useState, useEffect } from 'react';
import axios from 'axios';

function MyComponent() {
    const [responseData, setResponseData] = useState([]);
    const [stopConditionMet, setStopConditionMet] = useState(false);

    useEffect(() => {
        // Fonction pour effectuer une requête GET à l'API
        const fetchData = async () => {
            try {
                const response = await axios.get('url_de_votre_api');
                const data = response.data;
                // Mettre à jour l'état avec les données de la réponse
                setResponseData(prevData => [...prevData, data]);
                // Vérifier si la condition d'arrêt est remplie
                if (/* condition pour arrêter les requêtes */) {
                    setStopConditionMet(true);
                }
            } catch (error) {
                console.error('Une erreur s\'est produite :', error);
            }
        };

        // Effectuer la requête toutes les x secondes jusqu'à ce que la condition d'arrêt soit remplie
        const intervalId = setInterval(() => {
            if (!stopConditionMet) {
                fetchData();
            } else {
                clearInterval(intervalId);
            }
        }, 1000); // Répéter toutes les 1 seconde (ajustez cette valeur selon vos besoins)

        // Nettoyer l'intervalle lorsque le composant est démonté
        return () => clearInterval(intervalId);
    }, [stopConditionMet]); // Exécuter l'effet à chaque changement de stopConditionMet

    return (
        <div>
            {/* Afficher les données de la réponse */}
            {responseData.map((data, index) => (
                <div key={index}>{/* Afficher les données selon votre format */}</div>
            ))}
        </div>
    );
}

export default MyComponent;


import { useState, useEffect } from 'react';
import axios from 'axios';

function MyComponent() {
    const [responseData1, setResponseData1] = useState(null);
    const [responseData2, setResponseData2] = useState(null);

    useEffect(() => {
        // Fonction pour effectuer les deux requêtes simultanées
        const fetchData = async () => {
            try {
                // Utilisation de Promise.all() pour exécuter les deux requêtes en parallèle
                const [response1, response2] = await Promise.all([
                    axios.get('url_de_votre_api_1'),
                    axios.get('url_de_votre_api_2')
                ]);
                // Mettre à jour l'état avec les données de la réponse 1
                setResponseData1(response1.data);
                // Mettre à jour l'état avec les données de la réponse 2
                setResponseData2(response2.data);
            } catch (error) {
                console.error('Une erreur s\'est produite :', error);
            }
        };

        // Appel de la fonction pour effectuer les requêtes au chargement du composant
        fetchData();
    }, []);

    return (
        <div>
            {/* Afficher les données de la réponse 1 */}
            {responseData1 && (
                <div>
                    {/* Afficher les données de la réponse 1 selon votre format */}
                </div>
            )}
            {/* Afficher les données de la réponse 2 */}
            {responseData2 && (
                <div>
                    {/* Afficher les données de la réponse 2 selon votre format */}
                </div>
            )}
        </div>
    );
}

export default MyComponent;



import { useState, useEffect } from 'react';
import axios from 'axios';

function MyComponent() {
    const [data, setData] = useState(null);

    useEffect(() => {
        // Fonction pour effectuer la requête et mettre à jour l'état avec la valeur reçue
        const fetchData = async () => {
            try {
                const response = await axios.get('url_de_votre_api');
                const data = response.data;
                setData(data);
            } catch (error) {
                console.error('Une erreur s\'est produite :', error);
            }
        };

        // Effectuer la requête toutes les x secondes
        const intervalId = setInterval(() => {
            fetchData();
        }, 1000); // Répéter toutes les 1 seconde (ajustez cette valeur selon vos besoins)

        // Nettoyer l'intervalle lorsque le composant est démonté
        return () => clearInterval(intervalId);
    }, []);

    return (
        <div>
            {/* Afficher la valeur reçue */}
            <p>Valeur actuelle : {data}</p>
        </div>
    );
}

export default MyComponent;


import { useEffect, useRef, useState } from 'react';
import { Terminal } from 'xterm';
import 'xterm/css/xterm.css';
import axios from 'axios';

function MyTerminalComponent() {
    const terminalRef = useRef();
    const term = useRef(new Terminal());
    const [isObjectTrue, setIsObjectTrue] = useState(() => {
        // Récupérer l'état initial de l'objet à partir du localStorage
        const storedValue = localStorage.getItem('maValeur');
        return storedValue === 'true'; // Convertir en booléen
    });

    useEffect(() => {
        term.current.open(terminalRef.current);

        const fetchData = async () => {
            try {
                // Vérifier si l'objet est vrai avant de faire la requête
                if (isObjectTrue) {
                    const response = await axios.get('url_de_votre_api');
                    const data = response.data;

                    // Écrire les données dans le terminal xterm.js
                    term.current.write(data + '\r\n'); // Ajoutez un retour à la ligne après chaque donnée
                }
            } catch (error) {
                console.error('Une erreur s\'est produite :', error);
            }
        };

        // Appeler fetchData toutes les x secondes
        const intervalId = setInterval(fetchData, 1000);

        // Nettoyer l'intervalle lorsque le composant est démonté
        return () => clearInterval(intervalId);
    }, [isObjectTrue]); // Ajouter isObjectTrue comme dépendance de useEffect

    // Mettre à jour l'état de l'objet en écoutant les changements dans le localStorage
    useEffect(() => {
        const handleStorageChange = () => {
            const storedValue = localStorage.getItem('maValeur');
            setIsObjectTrue(storedValue === 'true');
        };

        window.addEventListener('storage', handleStorageChange);

        return () => {
            window.removeEventListener('storage', handleStorageChange);
        };
    }, []);

    return (
        <div>
            <div ref={terminalRef}></div>
        </div>
    );
}

export default MyTerminalComponent;


import { useEffect, useRef, useState } from 'react';
import { Terminal } from 'xterm';
import { FitAddon } from 'xterm-addon-fit';
import { WebLinksAddon } from 'xterm-addon-web-links';
import 'xterm/css/xterm.css';
import axios from 'axios';

interface XTermComponentProps {
  showOrHideVisuals: (show: Show, visible: boolean) => void;
  onProgressChanged: (inProgress: boolean) => void;
}

const XTermComponent: React.FC<XTermComponentProps> = ({
  showOrHideVisuals: onCustomFunction,
  onProgressChanged,
}) => {
  const terminalRef = useRef<HTMLDivElement>(null);
  const [fetchData, setFetchData] = useState(true); // Variable pour contrôler la récupération des données

  useEffect(() => {
    const terminal = new Terminal({
      cursorBlink: true,
      fontSize: 16,
      fontFamily: '"Fira Code", monospace',
      theme: {
        // ...
      },
    });

    let fitAddon = new FitAddon();
    terminal.loadAddon(fitAddon);
    const webLinksAddon = new WebLinksAddon();
    terminal.loadAddon(webLinksAddon);

    terminal.open(terminalRef.current);
    fitAddon.fit();

    let intervalId: NodeJS.Timeout;

    const fetchDataFromAPI = async () => {
      try {
        const response = await axios.get('url_de_votre_api');
        const data = response.data;
        terminal.writeln(data); // Écrire les données dans le terminal
        fitAddon.fit(); // Ajuster la taille du terminal
      } catch (error) {
        console.error('Une erreur s\'est produite lors de la récupération des données :', error);
      }
    };

    if (fetchData) {
      intervalId = setInterval(fetchDataFromAPI, 1000); // Récupérer les données toutes les secondes
    }

    return () => {
      clearInterval(intervalId); // Nettoyer l'intervalle lors du démontage du composant
      terminal.dispose(); // Disposer le terminal pour libérer les ressources
    };
  }, [fetchData]); // Rafraîchir l'effet lors du changement de fetchData

  const toggleFetchData = () => {
    setFetchData(prevFetchData => !prevFetchData); // Inverser l'état de fetchData
  };

  return (
    <div>
      <div ref={terminalRef}></div>
      <button onClick={toggleFetchData}>Toggle Fetch Data</button> {/* Bouton pour activer/désactiver la récupération des données */}
    </div>
  );
};

export default XTermComponent;


