import sys
from io import StringIO
import subprocess
import threading

def capture_output_and_write_to_file(function, output_file):
    # Redirection de sys.stdout vers un objet StringIO
    old_stdout = sys.stdout
    sys.stdout = StringIO()

    try:
        # Fonction externe
        function()

        # Récupération de la sortie
        output = sys.stdout.getvalue()

        # Écriture de la sortie dans le fichier
        with open(output_file, 'w') as f:
            f.write(output)
    finally:
        # Restauration de sys.stdout
        sys.stdout = old_stdout

# Fonction externe à appeler (remplacez avec la fonction réelle)
def external_function():
    import time
    for i in range(10):
        print("Element", i)
        time.sleep(1)

# Fichier où écrire la sortie
output_file = "output.txt"

# Lancer la fonction externe dans un thread pour ne pas bloquer le script principal
thread = threading.Thread(target=capture_output_and_write_to_file, args=(external_function, output_file))
thread.start()

# Lecture en direct de la sortie écrite dans le fichier
with open(output_file, 'r') as f:
    while True:
        line = f.readline()
        if not line:
            break
        print(line.strip())  # Afficher la ligne sans le saut de ligne


async function fetchTwoApis() {
    try {
        const response1 = await fetch('url_de_votre_api_1');
        const data1 = await response1.json();

        const response2 = await fetch('url_de_votre_api_2');
        const data2 = await response2.json();

        // Utilisez les données récupérées ici
        console.log('Données de la première API :', data1);
        console.log('Données de la deuxième API :', data2);
    } catch (error) {
        console.error('Une erreur s\'est produite :', error);
    }
}

fetchTwoApis();
import { useEffect, useRef } from 'react';
import { Terminal } from 'xterm';
import 'xterm/css/xterm.css';

function MyTerminalComponent() {
    const terminalRef = useRef();

    useEffect(() => {
        const term = new Terminal();
        term.open(terminalRef.current);

        // Fonction pour écrire des lignes dans le terminal
        function writeToTerminal(lines) {
            lines.forEach(line => {
                term.writeln(line);
            });
        }

        // Exemple : écrire des lignes dans le terminal
        const lines = ['Ligne 1', 'Ligne 2', 'Ligne 3'];
        writeToTerminal(lines);

        // Nettoyer le terminal lorsque le composant est démonté
        return () => {
            term.dispose();
        };
    }, []);

    return <div ref={terminalRef}></div>;
}

export default MyTerminalComponent;
