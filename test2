function vote(uint proposalIndex, bool _vote) public {
        Proposal storage proposal = proposals[proposalIndex];
        require(block.timestamp >= proposal.startTime, "Voting has not started yet.");
        require(block.timestamp < proposal.endTime, "Voting has ended.");
        require(!proposal.voted[msg.sender], "You have already voted.");
        if (_vote) {
            proposal.yesVotes++;
        } else {
            proposal.noVotes++;
        }
        proposal.voted[msg.sender] = true;
    }

    function executeProposal(uint proposalIndex) public {
        Proposal storage proposal = proposals[proposalIndex];
        require(block.timestamp >= proposal.endTime, "Voting has not ended yet.");
        require(proposal.state == ProposalState.Active, "Proposal is not active.");
        if (proposal.yesVotes > proposal.noVotes) {
            proposal.state = ProposalState.Succeeded;
        } else {
            proposal.state = ProposalState.Defeated;
        }
    }


const initialState1 = {
  count1: 0,
};
const { useGlobalState: useGlobalState1, setGlobalState: setGlobalState1 } = createGlobalState(initialState1);

const initialState2 = {
  count2: 0,
};
const { useGlobalState: useGlobalState2, setGlobalState: setGlobalState2 } = createGlobalState(initialState2);



const match = string.match(/ID de la proposition : (\d+)/);

if (match !== null) {
  const id = parseInt(match[1], 10);
  console.log(id); // Outputs: 5
} else {
  console.log("ID de la proposition not found");
}

// Vérifier si MetaMask est installé
if (typeof window.ethereum !== 'undefined') {
  const web3 = new Web3(window.ethereum);

  // Demander la permission de connexion
  await ethereum.request({ method: 'eth_requestAccounts' });

  // Récupérer l'adresse MetaMask
  const accounts = await ethereum.request({ method: 'eth_accounts' });
  const address = accounts[0];

  // Utiliser l'adresse dans votre API
  // ...
} else {
  console.log('MetaMask is not installed');
}

const cronExpression = `${date.getMinutes()} ${date.getHours()} ${date.getDate()} ${date.getMonth() + 1} *`;


// Importer les bibliothèques nécessaires
const { create } = require('node-storage');

// Créer une instance de stockage
const store = create('./my-storage.db'); // Remplacer './my-storage.db' avec le chemin de votre fichier de stockage

// Définir une fonction pour ajouter un élément
function ajouterElement(id, etat, couleur) {
  // Vérifier si l'ID de l'élément existe déjà dans le stockage
  if (store.has(id)) {
    console.error(`L'ID ${id} existe déjà dans le stockage.`);
    return;
  }

  // Créer un objet pour représenter l'élément
  const element = {
    id: id,
    etat: etat,
    couleur: couleur
  };

  // Stocker l'objet dans le stockage
  store.put(id, element);
  console.log(`Élément avec l'ID ${id} ajouté avec succès au stockage.`);
}

// Définir une fonction pour récupérer un élément par son ID
function recupererElement(id) {
  // Vérifier si l'ID de l'élément existe dans le stockage
  if (!store.has(id)) {
    console.error(`L'ID ${id} n'existe pas dans le stockage.`);
    return;
  }

  // Récupérer l'objet de l'élément à partir du stockage
  const element = store.get(id);
  console.log(`Élément avec l'ID ${id}: `, element);
  return element;
}

// Utiliser les fonctions pour ajouter et récupérer des éléments
ajouterElement(1, 'Nouveau', 'Rouge');
ajouterElement(2, 'En cours', 'Vert');
recupererElement(1);
recupererElement(2);


document.addEventListener('DOMContentLoaded', () => {
  const form = document.getElementById('myForm') as HTMLFormElement;
  const submitButton = document.getElementById('submitButton') as HTMLButtonElement;

  submitButton.addEventListener('click', (event) => {
    event.preventDefault(); // Empêche la soumission du formulaire par défaut

    // Effectuer le traitement du formulaire ici (envoi des données, etc.)

    // Redirection vers une autre page
    window.location.href = 'url_de_redirection';
  });
});


@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';

.mdx-container {
  @apply mx-auto w-3/4 p-4 bg-gray-100 rounded-lg shadow-md;
}



.mdx-container {
  margin: auto;
  max-width: 800px;
  padding: 2rem;
}

.mdx-container h1 {
  font-size: 2.5rem;
  font-weight: bold;
  margin-bottom: 1rem;
}

.mdx-container p {
  font-size: 1.1rem;
  margin-bottom: 1rem;
}

.mdx-container a {
  color: #0070f3;
  text-decoration: underline;
}

.mdx-container ul,
.mdx-container ol {
  margin-bottom: 1rem;
  padding-left: 1.5rem;
}

.mdx-container li {
  margin-bottom: 0.5rem;
}

.mdx-container code {
  font-family: 'Courier New', monospace;
  background-color: #f3f4f6;
  padding: 0.2rem 0.4rem;
  border-radius: 0.2rem;
}

/* Ajoutez d'autres styles Tailwind CSS selon vos préférences */

import './styles.css'; // Chemin vers votre fichier CSS

const Page = () => {
  return (
    <div className="mdx-container">
      <MDXRemote {...source} components={components} />
    </div>
  );
};

export default Page;
