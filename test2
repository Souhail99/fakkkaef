function vote(uint proposalIndex, bool _vote) public {
        Proposal storage proposal = proposals[proposalIndex];
        require(block.timestamp >= proposal.startTime, "Voting has not started yet.");
        require(block.timestamp < proposal.endTime, "Voting has ended.");
        require(!proposal.voted[msg.sender], "You have already voted.");
        if (_vote) {
            proposal.yesVotes++;
        } else {
            proposal.noVotes++;
        }
        proposal.voted[msg.sender] = true;
    }

    function executeProposal(uint proposalIndex) public {
        Proposal storage proposal = proposals[proposalIndex];
        require(block.timestamp >= proposal.endTime, "Voting has not ended yet.");
        require(proposal.state == ProposalState.Active, "Proposal is not active.");
        if (proposal.yesVotes > proposal.noVotes) {
            proposal.state = ProposalState.Succeeded;
        } else {
            proposal.state = ProposalState.Defeated;
        }
    }


const initialState1 = {
  count1: 0,
};
const { useGlobalState: useGlobalState1, setGlobalState: setGlobalState1 } = createGlobalState(initialState1);

const initialState2 = {
  count2: 0,
};
const { useGlobalState: useGlobalState2, setGlobalState: setGlobalState2 } = createGlobalState(initialState2);



const match = string.match(/ID de la proposition : (\d+)/);

if (match !== null) {
  const id = parseInt(match[1], 10);
  console.log(id); // Outputs: 5
} else {
  console.log("ID de la proposition not found");
}

// Vérifier si MetaMask est installé
if (typeof window.ethereum !== 'undefined') {
  const web3 = new Web3(window.ethereum);

  // Demander la permission de connexion
  await ethereum.request({ method: 'eth_requestAccounts' });

  // Récupérer l'adresse MetaMask
  const accounts = await ethereum.request({ method: 'eth_accounts' });
  const address = accounts[0];

  // Utiliser l'adresse dans votre API
  // ...
} else {
  console.log('MetaMask is not installed');
}

const cronExpression = `${date.getMinutes()} ${date.getHours()} ${date.getDate()} ${date.getMonth() + 1} *`;


// Importer les bibliothèques nécessaires
const { create } = require('node-storage');

// Créer une instance de stockage
const store = create('./my-storage.db'); // Remplacer './my-storage.db' avec le chemin de votre fichier de stockage

// Définir une fonction pour ajouter un élément
function ajouterElement(id, etat, couleur) {
  // Vérifier si l'ID de l'élément existe déjà dans le stockage
  if (store.has(id)) {
    console.error(`L'ID ${id} existe déjà dans le stockage.`);
    return;
  }

  // Créer un objet pour représenter l'élément
  const element = {
    id: id,
    etat: etat,
    couleur: couleur
  };

  // Stocker l'objet dans le stockage
  store.put(id, element);
  console.log(`Élément avec l'ID ${id} ajouté avec succès au stockage.`);
}

// Définir une fonction pour récupérer un élément par son ID
function recupererElement(id) {
  // Vérifier si l'ID de l'élément existe dans le stockage
  if (!store.has(id)) {
    console.error(`L'ID ${id} n'existe pas dans le stockage.`);
    return;
  }

  // Récupérer l'objet de l'élément à partir du stockage
  const element = store.get(id);
  console.log(`Élément avec l'ID ${id}: `, element);
  return element;
}

// Utiliser les fonctions pour ajouter et récupérer des éléments
ajouterElement(1, 'Nouveau', 'Rouge');
ajouterElement(2, 'En cours', 'Vert');
recupererElement(1);
recupererElement(2);


Bonjour ! Bien sûr, je serai ravi de vous aider. Voici une courte définition de la blockchain et d'une DAO, en mettant l'accent sur le consensus et la décentralisation :

La blockchain est une technologie de registre distribué (DLT) qui permet de stocker de manière sécurisée et transparente des informations sous forme de blocs interconnectés. Chaque bloc contient des données, des transactions ou d'autres types d'informations, et est lié de manière cryptographique aux blocs précédents et suivants, formant ainsi une chaîne immuable de blocs. La blockchain utilise un consensus entre les nœuds du réseau pour valider et enregistrer les nouvelles informations ajoutées à la chaîne, ce qui garantit l'intégrité et la sécurité des données sans nécessiter une autorité centrale.

Une DAO, ou Decentralized Autonomous Organization (Organisation Autonome Décentralisée), est une entité numérique qui fonctionne sur la base d'un code informatique exécuté sur une blockchain. Contrairement aux organisations traditionnelles, une DAO n'est pas contrôlée par une autorité centrale ou un individu, mais plutôt par des règles et des protocoles prédéfinis qui sont programmés dans son code source. Les décisions au sein d'une DAO sont prises par consensus, généralement par le biais de votes des détenteurs de jetons de gouvernance, qui sont des membres de la communauté impliquée dans la DAO. Cela permet une prise de décision plus démocratique et transparente, sans nécessiter d'intermédiaires.

En résumé, la blockchain est une technologie de registre distribué qui utilise un consensus pour sécuriser et valider les informations, tandis qu'une DAO est une organisation autonome décentralisée qui fonctionne sur la base d'un code informatique exécuté sur une blockchain, avec des décisions prises par consensus des détenteurs de jetons de gouvernance.





Souhail Ait Lahcen
tu peux les faire plus courte ? c'est pour une présentation
Bien sûr, voici des définitions plus courtes de la blockchain et d'une DAO axées sur le consensus et la décentralisation :

Blockchain : Une technologie de registre distribué utilisant le consensus pour sécuriser et valider les informations de manière transparente et immuable.

DAO : Une organisation autonome décentralisée qui fonctionne sur la base d'un code informatique exécuté sur une blockchain, avec des décisions prises par consensus des détenteurs de jetons de gouvernance pour une prise de décision démocratique et transparente.
