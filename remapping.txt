import os
import re
import subprocess
import git

# Chemin vers le répertoire de travail où les contrats sont récupérés
repo_path = "/chemin/vers/dossier/depot/"

# Cloner le dépôt
repo_url = "https://github.com/utilisateur/depot.git"
git.Repo.clone_from(repo_url, repo_path)

# Parcourir les fichiers Solidity
solidity_files = [f for f in os.listdir(repo_path) if f.endswith(".sol")]

# Analyser les instructions import et extraire les dépendances
dependencies = set()
for file_name in solidity_files:
    with open(os.path.join(repo_path, file_name), "r") as file:
        content = file.read()
        imports = re.findall(r"import\s+.*?;\s*", content)
        for imp in imports:
            dep = imp.split(" ")[1].replace(";", "").strip()
            dependencies.add(dep)

# Installer les dépendances
for dep in dependencies:
    # Exécuter la commande d'installation (exemple avec pip)
    subprocess.run(["pip", "install", dep])
    # Vous pouvez ajuster cette étape en fonction des outils de gestion de paquets spécifiques à Solidity (ex : truffle, brownie, etc.)

# Compiler les contrats Solidity
# ... Ajoutez ici le code pour la compilation des contrats


# Commande Git pour initialiser les sous-modules
git_command = ["git", "submodule", "update", "--init", "--recursive"]

# Exécution de la commande Git
subprocess.run(git_command, cwd=repo_path)


import os

def trouver_fichiers_sol(chemin_dossier):
    fichiers_sol = []
    # Parcourir récursivement le dossier et ses sous-dossiers
    for root, dirs, files in os.walk(chemin_dossier):
        # Pour chaque fichier dans le dossier actuel
        for file in files:
            # Vérifier si le fichier a l'extension .sol
            if file.endswith(".sol"):
                # Ajouter le chemin complet du fichier à la liste
                chemin_fichier = os.path.join(root, file)
                fichiers_sol.append(chemin_fichier)
    return fichiers_sol

# Exemple d'utilisation
chemin_dossier = "/chemin/vers/votre/dossier"
fichiers_sol = trouver_fichiers_sol(chemin_dossier)
print(fichiers_sol)

solc_versions = ["0.8.24", "0.8.23", "0.8.22", "0.8.21", "0.8.20", "0.8.19", "0.8.18", "0.8.17", "0.8.16", "0.8.15", "0.8.13", "0.8.12", "0.8.11", "0.8.10", "0.8.9", "0.8.8", "0.8.7", "0.8.6", "0.8.5", "0.8.4", "0.8.3", "0.8.2", "0.8.1", "0.8.0", "0.7.6", "0.7.5", "0.7.4", "0.7.3", "0.7.2", "0.7.1", "0.7.0", "0.6.12", "0.6.11", "0.6.10", "0.6.9", "0.6.8", "0.6.7", "0.6.6", "0.6.5", "0.6.4", "0.6.3", "0.6.2", "0.6.1", "0.6.0", "0.5.17", "0.5.16", "0.5.15", "0.5.14", "0.5.13", "0.5.12", "0.5.11", "0.5.10", "0.5.9", "0.5.8", "0.5.7", "0.5.6", "0.5.5", "0.5.4", "0.5.3", "0.5.2", "0.5.1", "0.5.0", "0.4.26", "0.4.25", "0.4.24", "0.4.23", "0.4.22", "0.4.21", "0.4.20", "0.4.19", "0.4.18", "0.4.17", "0.4.16", "0.4.15", "0.4.14", "0.4.13", "0.4.12", "0.4.11", "0.4.10", "0.4.9", "0.4.8", "0.4.7", "0.4.6", "0.4.5", "0.4.4", "0.4.3", "0.4.2", "0.4.1", "0.4.0", "0.3.6", "0.3.5", "0.3.4", "0.3.3", "0.3.2", "0.3.1", "0.3.0", "0.2.2", "0.2.1", "0.2.0", "0.1.7", "0.1.6", "0.1.5", "0.1.4", "0.1.3", "0.1.2", "0.1.1", "0.1.0"]


import os

def trouver_fichiers_sol_et_repertoires(chemin_dossier):
    fichiers_sol = []
    repertoires = []
    
    # Parcourir récursivement le dossier et ses sous-dossiers
    for root, dirs, files in os.walk(chemin_dossier):
        # Pour chaque fichier dans le dossier actuel
        for file in files:
            # Vérifier si le fichier a l'extension .sol
            if file.endswith(".sol"):
                # Ajouter le chemin complet du fichier à la liste des fichiers .sol
                chemin_fichier = os.path.join(root, file)
                fichiers_sol.append(chemin_fichier)
        # Ajouter le chemin du répertoire à la liste des répertoires
        repertoires.append(root)

    return fichiers_sol, repertoires

# Exemple d'utilisation
chemin_dossier = "/chemin/vers/votre/dossier"
fichiers_sol, repertoires = trouver_fichiers_sol_et_repertoires(chemin_dossier)

# Affichage des chemins complets des fichiers .sol
print("Chemins complets des fichiers .sol :")
for fichier in fichiers_sol:
    print(fichier)

# Affichage des chemins des répertoires contenant des fichiers .sol
print("\nChemins des répertoires contenant des fichiers .sol :")
for repertoire in repertoires:
    print(repertoire)



import os

def trouver_fichiers_sol_et_repertoires(chemin_dossier):
    fichiers_sol = []
    repertoires = []

    # Ajouter la racine à la liste des répertoires
    racine = os.path.abspath(chemin_dossier)
    repertoires.append(racine)

    # Parcourir récursivement le dossier et ses sous-dossiers
    for root, dirs, files in os.walk(chemin_dossier):
        # Pour chaque fichier dans le dossier actuel
        for file in files:
            # Vérifier si le fichier a l'extension .sol
            if file.endswith(".sol"):
                # Ajouter le chemin complet du fichier à la liste des fichiers .sol
                chemin_fichier = os.path.join(root, file)
                fichiers_sol.append(chemin_fichier)
        # Ajouter le chemin complet du répertoire à la liste des répertoires
        chemin_complet_repertoire = os.path.abspath(root)
        repertoires.append(chemin_complet_repertoire)

    return fichiers_sol, repertoires

# Exemple d'utilisation
chemin_dossier = "/chemin/vers/votre/dossier"
fichiers_sol, repertoires = trouver_fichiers_sol_et_repertoires(chemin_dossier)

# Affichage des chemins complets des fichiers .sol
print("Chemins complets des fichiers .sol :")
for fichier in fichiers_sol:
    print(fichier)

# Affichage des chemins des répertoires contenant des fichiers .sol
print("\nChemins des répertoires contenant des fichiers .sol :")
for repertoire in repertoires:
    print(repertoire)
