import os

# Chemin du dossier contenant les dossiers
dossier_parent = "."

# Vérification de l'existence du dossier
if not os.path.exists(dossier_parent):
    print(f"Le dossier '{dossier_parent}' n'existe pas.")
else:
    # Utilisation de os.listdir() pour obtenir la liste des dossiers
    dossiers = [nom for nom in os.listdir(dossier_parent) if os.path.isdir(os.path.join(dossier_parent, nom))]

    if not dossiers:
        print(f"Aucun dossier trouvé dans le dossier '{dossier_parent}'.")
    else:
        # Affichage des dossiers
        print("Dossiers présents :")
        for dossier in dossiers:
            print(dossier)




import os

chemins = ["./src/BC/Binance_0x6789.sol", "./yo/BC/Binance_0x6789.sol"]

noms_fichiers = [os.path.basename(chemin) for chemin in chemins]
noms_fichiers_sans_extension = [os.path.splitext(nom)[0] for nom in noms_fichiers]


prefixe_a_enlever = "./src/"

chemins_relatifs = [chemin.replace(prefixe_a_enlever, "") for chemin in chemins]

print(noms_fichiers_sans_extension)



Il semble que vous essayez d'accéder à un élément spécifique de votre chemin comme s'il s'agissait d'une liste, ce qui provoque une erreur "IndexError" car les chaînes de caractères sont indexées par caractère et non par élément comme les listes.

Si vous voulez ouvrir chaque fichier correspondant à chaque chemin dans votre liste chemins_relatifs, vous pouvez simplement utiliser open avec chaque chemin directement. Voici comment vous pouvez le faire :

python
Copy code
for chemin_relatif in chemins_relatifs:
    chemin_absolu = os.path.join(dossier_script, chemin_relatif)
    with open(chemin_absolu, "r") as fichier:
        contenu = fichier.read()
        # Faire quelque chose avec le contenu du fichier
 const errors = {};
        if (!values.contractAddress) {
          errors.contractAddress = "Contract address is required";
        } else if (values.contractAddress.length !== 42) {
          errors.contractAddress = "Invalid Contract Address";
        }
        return errors;



/* Style de base pour la barre de recherche */
.search-bar {
  display: flex;
  align-items: center;
  border: 1px solid #ccc;
  border-radius: 5px;
  padding: 5px;
}

/* Style pour l'élément input */
.search-input {
  flex: 1;
  border: none;
  outline: none;
  font-size: 16px;
  padding: 5px;
  color: black; /* Couleur du texte en noir */
}

/* Style pour le bouton de recherche */
.search-button {
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 5px;
  padding: 5px 10px;
  cursor: pointer;
  margin-left: 5px;
}

Bien sûr, voici un exemple de code CSS complet pour un élément <select> :

css
Copy code
/* Style de base pour le select */
.custom-select {
  position: relative;
  display: inline-block;
  width: 200px;
}

/* Style pour le select lui-même */
.custom-select select {
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  background-color: white;
  border: 1px solid #ccc;
  border-radius: 5px;
  padding: 5px;
  font-size: 16px;
  color: black; /* Couleur du texte en noir */
  cursor: pointer;
}

/* Style pour la flèche de sélection */
.custom-select::after {
  content: '\25BC'; /* flèche vers le bas */
  position: absolute;
  top: 50%;
  right: 10px;
  transform: translateY(-50%);
}

/* Style pour le dropdown menu */
.custom-select select:focus ~ .dropdown-content {
  display: block;
}

/* Style pour les options */
.custom-select .dropdown-content {
  display: none;
  position: absolute;
  background-color: white;
  border: 1px solid #ccc;
  border-radius: 5px;
  padding: 5px;
  top: 100%;
  left: 0;
  width: 100%;
  z-index: 1;
}

/* Style pour les options au survol */
.custom-select .dropdown-content:hover {
  background-color: #f1f1f1;
}

/* Style pour les options au survol */
.custom-select .dropdown-content option {
  padding: 5px;
  color: black; /* Couleur du texte en noir */
  cursor: pointer;
}
/* Style pour le bouton de recherche au survol */
.search-button:hover {
  background-color: #0056b3;
}


//////////////////////////////////////////////


<Form className="flex flex-col items-center gap-4 md:flex-row md:items-end">
  <div className="flex w-full flex-col gap-2 md:w-1/2">
    <div className="custom-select">
      <select
        id="network"
        name="network"
        value={values.network}
        onChange={handleChange}
        className="custom-select__select"
      >
        {networkOptionsMarkup}
      </select>
      <span className="custom-select__icon">
        <Link
          href={NETWORKS[values.network].url}
          isExternal
          showAnchorIcon
        >
          site
        </Link>
      </span>
    </div>
  </div>
  <div className="custom-input md:w-1/2">
    <input
      id="contractAddress"
      name="contractAddress"
      type="text"
      autoComplete="off"
      value={values.contractAddress}
      onChange={handleChange}
      className="custom-input__input"
      placeholder="Contract address"
    />
    <span className="custom-input__icon">
      <Button
        type="submit"
        isLoading={isSubmitting}
        className="p-2"
        isIconOnly
        isDisabled={!isValid}
      >
        <MagnifyingGlassIcon />
      </Button>
    </span>
  </div>
</Form>

.custom-select {
  position: relative;
  width: 100%;
}

.custom-select__select {
  width: 100%;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 5px;
  outline: none;
}

.custom-select__icon {
  position: absolute;
  right: 8px;
  top: 50%;
  transform: translateY(-50%);
}

.custom-input {
  position: relative;
  width: 100%;
}

.custom-input__input {
  width: 100%;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 5px;
  outline: none;
}

.custom-input__icon {
  position: absolute;
  right: 8px;
  top: 50%;
  transform: translateY(-50%);
}




import os
import git

# Chemin du fichier Python en cours d'exécution
current_dir = os.path.dirname(os.path.abspath(__file__))

# Nom du dossier à créer pour cloner le dépôt
clone_dir_name = "cloned_repo"

# Chemin complet du dossier de clonage
clone_path = os.path.join(current_dir, clone_dir_name)

# URL du dépôt Git à cloner
repo_url = "https://github.com/utilisateur/depot.git"

# Clonage du dépôt dans le dossier de clonage
repo = git.Repo.clone_from(repo_url, clone_path)

# Vous pouvez maintenant utiliser 'repo' pour effectuer différentes opérations sur le dépôt cloné



import shutil

# Chemin du répertoire du dépôt cloné
clone_path = "/chemin/vers/dossier/clone"

# Suppression du répertoire du dépôt cloné
shutil.rmtree(clone_path)

print("Le dépôt cloné a été supprimé avec succès.")
*0

import requests

# Remplacez 'YOUR_API_KEY' par votre propre clé API d'Etherscan
api_key = 'YOUR_API_KEY'

# Adresse du contrat que vous souhaitez surveiller
contract_address = '0x...'

# Numéro de bloc de début et de fin
start_block = '1234567'  # Numéro du bloc de début
end_block = '1234569'  # Numéro du bloc de fin

# URL de l'API d'Etherscan
api_url = f'https://api.etherscan.io/api?module=logs&action=getLogs&fromBlock={start_block}&toBlock={end_block}&address={contract_address}&apikey={api_key}'

try:
    # Effectuer la requête HTTP
    response = requests.get(api_url)
    response.raise_for_status()  # Gérer les erreurs HTTP

    # Convertir la réponse JSON en dictionnaire Python
    data = response.json()

    # Traiter les logs de transaction pour calculer les transactions moyennes entre les blocs
    logs = data['result']
    # Faites vos calculs ici...

except requests.exceptions.RequestException as e:
    print('Une erreur s\'est produite lors de la récupération des logs de transaction :', e)
