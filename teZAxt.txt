// Tableau.js

import React, { useState } from 'react';

const Tableau = () => {
  const [donnees, setDonnees] = useState([
    { id: 1, nom: 'John Doe', age: 25 },
    { id: 2, nom: 'Jane Smith', age: 30 },
    { id: 3, nom: 'Bob Johnson', age: 35 },
  ]);

  const handleCheckboxChange = (id) => {
    setDonnees((prevState) =>
      prevState.map((item) =>
        item.id === id ? { ...item, checked: !item.checked } : item
      )
    );
  };

  return (
    <table>
      <thead>
        <tr>
          <th>Nom</th>
          <th>Age</th>
          <th>Sélectionner</th>
        </tr>
      </thead>
      <tbody>
        {donnees.map((item) => (
          <tr key={item.id}>
            <td>{item.nom}</td>
            <td>{item.age}</td>
            <td>
              <input
                type="checkbox"
                checked={item.checked || false}
                onChange={() => handleCheckboxChange(item.id)}
              />
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  );
};

export default Tableau;


// index.js

import Tableau from './Tableau';

const HomePage = () => {
  return (
    <div>
      <h1>Tableau de données</h1>
      <Tableau />
    </div>
  );
};

export default HomePage;

/* styles.css */

table {
  width: 100%;
  border-collapse: collapse;
}

th, td {
  border: 1px solid #ccc;
  padding: 8px;
}

th {
  background-color: #f2f2f2;
}

tr:nth-child(even) {
  background-color: #f9f9f9;
}

input[type="checkbox"] {
  transform: scale(1.5);
}



import { MongoClient } from 'mongodb';

// ...

export const getStaticProps: GetStaticProps = async () => {
  // Connexion à la base de données MongoDB
  const uri = 'mongodb://localhost:27017'; // Remplacez par votre URI de connexion MongoDB
  const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });

  try {
    await client.connect();
    const database = client.db('myDatabase'); // Remplacez 'myDatabase' par le nom de votre base de données
    const collection = database.collection('myCollection'); // Remplacez 'myCollection' par le nom de votre collection

    // Récupération des données depuis la base de données
    const documents = await collection.find().toArray();

    const posts = documents.map((doc) => {
      const { mdxString } = doc; // Remplacez 'mdxString' par le nom de votre champ représentant la chaîne mdx dans la base de données
      // Autres transformations et opérations sur les données selon vos besoins
      return { mdxString };
    });

    return { props: { posts } };
  } catch (error) {
    console.error(error);
    return { props: { posts: [] } };
  } finally {
    await client.close();
  }
};

// ...

const CardComponent: FC<{ post: Post }> = ({ post }: { post: Post }) => {
  const { mdxString } = post;

  // Utilisez la chaîne de caractères mdx pour afficher le contenu

  return (
    // Votre code de composant de carte modifié pour utiliser la chaîne de caractères mdx
  );
};

// ...


// ...

export const getStaticProps: GetStaticProps = async () => {
  try {
    const response = await fetch('https://votre-api.com/chemin-de-l-api');
    const data = await response.json();

    const posts = data.map((item) => {
      const { mdxString } = item;
      // Autres transformations et opérations sur les données selon vos besoins
      return { mdxString };
    });

    return { props: { posts } };
  } catch (error) {
    console.error(error);
    return { props: { posts: [] } };
  }
};

// ...

useEffect(() => {
  const filteredPostsTitles: string[] = posts
    .map((post: Post) => post.metaData.title.toLowerCase())
    .filter((title: string) =>
      title.includes(searchString.trim().toLowerCase())
    );

  const refilteredPosts: Post[] = posts.filter((post: Post) =>
    filteredPostsTitles.includes(post.metaData.title.toLowerCase())
  );

  setFilteredPosts(refilteredPosts);
}, [searchString, posts]);

 href={{
          pathname: '/[slug]',
          query: { string1, string2 },
        }}
        as="/my-slug" // Remplacez "my-slug" par la valeur de votre slug
        
       
       import { useRouter } from 'next/router';

const PostPage = () => {
  const router = useRouter();
  const { string1, string2 } = router.query;

  return (
    <div>
      <h1>Page du slug : {router.query.slug}</h1>
      <p>String 1 : {string1}</p>
      <p>String 2 : {string2}</p>
    </div>
  );
};

export default PostPage;


import { useEffect, useState } from 'react';
import { Web3Provider } from '@ethersproject/providers';
import { Web3ReactProvider } from '@web3-react/core';
import { WalletConnectProvider } from '@web3-react/walletconnect-provider';
import { Button } from '@mui/material';
import Web3Modal from 'web3modal';

function getLibrary(provider: any): Web3Provider {
  const library = new Web3Provider(provider);
  library.pollingInterval = 12000;
  return library;
}

const WalletButton = () => {
  const [web3Modal, setWeb3Modal] = useState<Web3Modal | null>(null);
  const [provider, setProvider] = useState<any | null>(null);

  useEffect(() => {
    const modal = new Web3Modal({
      network: 'mainnet', // Mettez ici le réseau Ethereum souhaité
      cacheProvider: true,
      providerOptions: {
        walletconnect: {
          package: WalletConnectProvider,
          options: {
            infuraId: 'INFURA_PROJECT_ID', // Remplacez par votre propre ID de projet Infura
          },
        },
      },
    });
    setWeb3Modal(modal);
  }, []);

  const connectWallet = async () => {
    try {
      if (web3Modal) {
        const externalProvider = await web3Modal.connect();
        setProvider(externalProvider);
      }
    } catch (error) {
      console.log('Erreur de connexion au portefeuille :', error);
    }
  };

  return (
    <Web3ReactProvider getLibrary={getLibrary}>
      <Button variant="contained" onClick={connectWallet}>
        Connecter le portefeuille
      </Button>
    </Web3ReactProvider>
  );
};

export default WalletButton;


import WalletButton from './components/WalletButton';

const HomePage = () => {
  return (
    <div>
      <h1>Ma page d'accueil</h1>
      <WalletButton />
    </div>
  );
};

export default HomePage;



import requests

# Clé d'API d'Etherscan
api_key = 'YOUR_API_KEY'

# Adresse Ethereum cible
eth_address = 'YOUR_ETH_ADDRESS'

# Endpoint pour récupérer les transactions
url = f'https://api.etherscan.io/api?module=account&action=txlist&address={eth_address}&apikey={api_key}'

# Faire la requête HTTP pour récupérer les transactions
response = requests.get(url)
data = response.json()

# Vérifier si la requête a réussi
if data['status'] == '1':
    # Récupérer les transactions
    transactions = data['result']
    
    # Parcourir les transactions et afficher les détails
    for tx in transactions:
        tx_hash = tx['hash']
        from_address = tx['from']
        to_address = tx['to']
        value = float(tx['value']) / 10**18  # Convertir de wei à ether
        timestamp = int(tx['timeStamp'])
        
        print(f"Transaction: {tx_hash}")
        print(f"De: {from_address}")
        print(f"Vers: {to_address}")
        print(f"Montant: {value} ETH")
        print(f"Timestamp: {timestamp}")
        print("------------------------")
else:
    # Afficher le message d'erreur en cas d'échec de la requête
    error_message = data['message']
    print(f"Erreur lors de la récupération des transactions : {error_message}")


# Endpoint pour récupérer le taux de change ETH/USD à une date spécifique
        coingecko_url = f'https://api.coingecko.com/api/v3/coins/ethereum/history?date={timestamp}&localization=false'
        coingecko_response = requests.get(coingecko_url)
        coingecko_data = coingecko_response.json()

        # Vérifier si la requête a réussi
        if coingecko_response.status_code == 200:
            # Récupérer le taux de change ETH/USD à la date de la transaction
            eth_usd_rate = coingecko_data['market_data']['current_price']['usd']
            value_usd = value_eth * eth_usd_rate

            print(f"Transaction: {tx_hash}")
            print(f"De: {from_address}")
            print(f"Montant: {value_eth} ETH")
            print(f"Montant en USD: {value_usd} USD")
            print(f"Timestamp: {timestamp}")
            print("------------------------")
        else:
            print(f"Erreur lors de la récupération du taux de change ETH/USD : {coingecko_data['error']}")


import { useEffect } from 'react';

const PlotPage = () => {
  useEffect(() => {
    // Appeler votre script R ici
    const { exec } = require('child_process');
    const command = 'Rscript plot.R';
    
    exec(command, (error, stdout, stderr) => {
      if (error) {
        console.error(`Erreur lors de l'exécution du script R : ${error.message}`);
        return;
      }
      
      console.log('Le script R a été exécuté avec succès.');
      
      // Afficher le plot généré dans la page
      const plotPath = 'plot.png';
      const img = document.createElement('img');
      img.src = plotPath;
      document.body.appendChild(img);
    });
  }, []);

  return (
    <div>
      <h1>Page de plot</h1>
    </div>
  );
};

export default PlotPage;
