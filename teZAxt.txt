// Tableau.js

import React, { useState } from 'react';

const Tableau = () => {
  const [donnees, setDonnees] = useState([
    { id: 1, nom: 'John Doe', age: 25 },
    { id: 2, nom: 'Jane Smith', age: 30 },
    { id: 3, nom: 'Bob Johnson', age: 35 },
  ]);

  const handleCheckboxChange = (id) => {
    setDonnees((prevState) =>
      prevState.map((item) =>
        item.id === id ? { ...item, checked: !item.checked } : item
      )
    );
  };

  return (
    <table>
      <thead>
        <tr>
          <th>Nom</th>
          <th>Age</th>
          <th>Sélectionner</th>
        </tr>
      </thead>
      <tbody>
        {donnees.map((item) => (
          <tr key={item.id}>
            <td>{item.nom}</td>
            <td>{item.age}</td>
            <td>
              <input
                type="checkbox"
                checked={item.checked || false}
                onChange={() => handleCheckboxChange(item.id)}
              />
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  );
};

export default Tableau;


// index.js

import Tableau from './Tableau';

const HomePage = () => {
  return (
    <div>
      <h1>Tableau de données</h1>
      <Tableau />
    </div>
  );
};

export default HomePage;

/* styles.css */

table {
  width: 100%;
  border-collapse: collapse;
}

th, td {
  border: 1px solid #ccc;
  padding: 8px;
}

th {
  background-color: #f2f2f2;
}

tr:nth-child(even) {
  background-color: #f9f9f9;
}

input[type="checkbox"] {
  transform: scale(1.5);
}



import { MongoClient } from 'mongodb';

// ...

export const getStaticProps: GetStaticProps = async () => {
  // Connexion à la base de données MongoDB
  const uri = 'mongodb://localhost:27017'; // Remplacez par votre URI de connexion MongoDB
  const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });

  try {
    await client.connect();
    const database = client.db('myDatabase'); // Remplacez 'myDatabase' par le nom de votre base de données
    const collection = database.collection('myCollection'); // Remplacez 'myCollection' par le nom de votre collection

    // Récupération des données depuis la base de données
    const documents = await collection.find().toArray();

    const posts = documents.map((doc) => {
      const { mdxString } = doc; // Remplacez 'mdxString' par le nom de votre champ représentant la chaîne mdx dans la base de données
      // Autres transformations et opérations sur les données selon vos besoins
      return { mdxString };
    });

    return { props: { posts } };
  } catch (error) {
    console.error(error);
    return { props: { posts: [] } };
  } finally {
    await client.close();
  }
};

// ...

const CardComponent: FC<{ post: Post }> = ({ post }: { post: Post }) => {
  const { mdxString } = post;

  // Utilisez la chaîne de caractères mdx pour afficher le contenu

  return (
    // Votre code de composant de carte modifié pour utiliser la chaîne de caractères mdx
  );
};

// ...
